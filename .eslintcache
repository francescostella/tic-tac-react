[{"/Users/francescostella/Workspace/learn/react/tic-tac-react/src/index.js":"1","/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Utils.js":"2","/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Game/Game.js":"3","/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Board/Board.js":"4","/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Square/Square.js":"5"},{"size":199,"mtime":1612091545913,"results":"6","hashOfConfig":"7"},{"size":897,"mtime":1612028098420,"results":"8","hashOfConfig":"7"},{"size":3535,"mtime":1612092521294,"results":"9","hashOfConfig":"7"},{"size":830,"mtime":1612092235335,"results":"10","hashOfConfig":"7"},{"size":370,"mtime":1612091542113,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"13f36tn",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/francescostella/Workspace/learn/react/tic-tac-react/src/index.js",[],["25","26"],"/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Utils.js",[],"/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Game/Game.js",["27"],"import React from 'react';\nimport Board from '../Board/Board';\nimport Utils from '../Utils';\nimport './Game.style.scss'\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          positionMove: [0, 0],\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      sortAscending: true,\n    }\n\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.history.length + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (Utils.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        positionMove: Utils.calculatePosition(i),\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleSort() {\n    if (this.state.sortAscending) {\n      // ASC\n    }\n\n    if (!this.state.sortAscending) {\n      // DESC\n    }\n\n    this.setState({\n      sortAscending: !this.state.sortAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = Utils.calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const row = history[move].positionMove[0];\n      const col = history[move].positionMove[1];\n      const desc = move ?\n        'move #' + move + ' made in row ' + row + ' and col ' + col :\n        'Go to game start';\n        return (\n          <li key={move}>\n            <button \n              onClick={() => this.jumpTo(move)}\n              className={this.state.stepNumber === move ? 'active' : ''}\n            >{desc}</button>\n          </li>\n        );\n    }).sort((moveA, moveB) => {\n      if (this.state.sortAscending) {\n        return moveA.key - moveB.key;\n      }\n\n      if (!this.state.sortAscending) {\n        return moveB.key - moveA.key;\n      }\n    });\n\n    let status;\n\n    if (winner) {\n      status = 'The WINNER is ' + winner.player + '! ';\n    }\n\n    if (!winner) {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    const isDraw = moves.length === 10 && !winner;\n    const classNamesMessage = 'game__message ' + (isDraw ? 'is-draw' : '') + (winner ? 'is-winner' : '');\n\n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game__board\">\n            <Board\n              winnerLine={winner?.line}\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n            <p className={winner || isDraw ? 'hidden' : ''}>\n              {status}\n            </p>\n          </div>\n          <div className=\"game__info\">\n            <div>\n              <button \n                onClick={() => this.handleSort()}\n              >\n                Sort {this.state.sortAscending ? 'ASC' : 'DESC'}\n              </button>\n            </div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n        \n        <div className={classNamesMessage}>\n          <h3>{winner ? status : 'DRAW'}</h3> \n          <div>\n            <button onClick={() => window.location.reload()}>\n            {winner ? 'New Game' : 'Restart'}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Board/Board.js",[],"/Users/francescostella/Workspace/learn/react/tic-tac-react/src/components/Square/Square.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":85,"column":28,"nodeType":"36","messageId":"37","endLine":85,"endColumn":30},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["40"],["41"],"no-global-assign","no-unsafe-negation"]