{"version":3,"sources":["assets/icons/icon-human.svg","assets/icons/icon-bot.svg","components/Square/Square.js","components/Board/Board.js","components/Utils.js","components/AIPlayer.js","components/Game/Game.js","index.js"],"names":["Square","props","isWinnerSquare","winnerLine","includes","cellKey","classes","className","onClick","value","Board","i","this","squares","rows","columns","board","cellsCounter","row","j","push","renderSquare","createBoard","React","Component","Utils","lines","index","length","a","b","c","player","line","items","Math","floor","random","AIPlayer","difficulty","level","levelSkills","easy","insane","depth","isMaximizing","isWinner","calculateWinner","X","O","tie","move","bestScore","Infinity","score","minimax","possibleMoves","randomItemFromArray","bestMove","playDumb","Game","state","history","Array","fill","coordinatesMove","isHuman","stepNumber","xIsNext","sortAscending","isPlayingAI","humanPlayer","baseState","Object","assign","setState","isNotAllowedMove","registerMove","currentIsHuman","slice","concat","calculatePosition","passTurnToAI","setTimeout","moveAI","makeMove","current","step","winner","moves","map","col","desc","data-move-number","jumpTo","sort","moveA","moveB","key","isDraw","handlePickPlayer","src","HumanPlayerAvatar","alt","BotPlayerAvatar","handleResetGame","handleClick","handleSort","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c1412e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-human.ebca92cc.svg\";","export default __webpack_public_path__ + \"static/media/icon-bot.a80b2169.svg\";","import './Square.styles.scss';\n\nconst Square = (props) => {\n  const isWinnerSquare = props.winnerLine && props.winnerLine.includes(props.cellKey) ? 'is-winner-square' : '';\n  const classes = `square ${isWinnerSquare}`;\n  return (\n    <button \n      className={classes} \n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;","import React from 'react';\nimport Square from '../Square/Square'; \nimport './Board.styles.scss'\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square \n        key={i}\n        cellKey={i}\n        value={this.props.squares[i]} \n        winnerLine={this.props.winnerLine}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  createBoard(rows, columns) {\n    const board = [];\n    let cellsCounter = 0;\n\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n\n      for (let j = 0; j < columns; j++) {\n        row.push(this.renderSquare(cellsCounter++));\n      }\n\n      board.push(<div className=\"board-row\" key={i}>{row}</div>)\n    }\n    \n    return board;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createBoard(3, 3)}\n      </div>\n    );\n  }\n}\n\nexport default Board;","const Utils = {};\n\nUtils.calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let index = 0; index < lines.length; index++) {\n    const [a, b, c] = lines[index];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        player: squares[a],\n        line: [a, b, c]\n      };\n    }\n  }\n\n  return null;\n}\n\nUtils.calculatePosition = (index) => {\n  switch (index) {\n    case 0:\n      return [1, 1];\n    case 1:\n      return [1, 2];\n    case 2:\n      return [1, 3];\n    case 3:\n      return [2, 1];\n    case 4:\n      return [2, 2];\n    case 5:\n      return [2, 3];\n    case 6:\n      return [3, 1];\n    case 7:\n      return [3, 2];\n    case 8:\n      return [3, 3];\n\n    default:\n      return [1, 1];\n  }\n}\n\nUtils.randomItemFromArray = (items) => {\n  return items[Math.floor(Math.random() * items.length)];\n}\n\nexport default Utils;","import Utils from '../components/Utils';\n\nclass AIPlayer {\n  level = 1;\n\n  constructor(difficulty) {\n    let levelSkills = {\n      easy: 1,\n      insane: 2,\n    };\n\n    this.level = levelSkills[difficulty] ? levelSkills[difficulty] : 1;\n  }\n\n  static bestMove(board) {\n    let bestScore = -Infinity;\n    let move;\n\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === null) {\n        let score = this.minimax(board, 0, true);\n\n        if (score > bestScore) {\n          bestScore = score;\n          move = i;\n        }\n      }  \n    }\n\n    return move;\n  }\n\n  minimax(board, depth, isMaximizing) {\n    let scores = {\n      X: 1,\n      O: -1,\n      tie: 0\n    };\n\n    const isWinner = Utils.calculateWinner(board);\n\n    if (isWinner) {\n      return scores[isWinner.player];\n    }\n\n    if (isMaximizing) {\n\n    }\n\n    return 1;\n  }\n\n  static playDumb(board) {\n    let possibleMoves = [];\n\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === null) {\n        possibleMoves.push(i);\n      }  \n    }\n\n    return Utils.randomItemFromArray(possibleMoves);\n  }\n\n  static makeMove(board) {\n    if (this.level === 2) {\n      return this.bestMove(board);\n    }\n\n    return this.playDumb(board);\n  }\n}\n\nexport default AIPlayer;","import React from 'react';\nimport HumanPlayerAvatar from '../../assets/icons/icon-human.svg';\nimport BotPlayerAvatar from '../../assets/icons/icon-bot.svg'\nimport Board from '../Board/Board';\nimport Utils from '../Utils';\nimport AIPlayer from '../AIPlayer';\nimport './Game.style.scss'\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          coordinatesMove: [0, 0],\n          isHuman: true,\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      sortAscending: true,\n    }\n    \n    this.isPlayingAI = false;\n    this.humanPlayer = this.state.xIsNext ? 'X' : 'O';\n    this.baseState = Object.assign({}, this.state);\n    this.AIPlayer = new AIPlayer('easy');\n  }\n\n  handleResetGame() {\n    this.setState(this.baseState)\n    this.humanPlayer = this.baseState.xIsNext ? 'X' : 'O';\n  }\n\n  handleClick(i) {\n    if (this.isNotAllowedMove() || this.isPlayingAI) {\n      return;\n    }\n\n    this.registerMove(i, true);\n  }\n\n  registerMove(move, currentIsHuman) {\n    const history = this.state.history.slice(0, this.state.history.length + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (squares[move]) {\n      return;\n    }\n\n    const player = this.state.xIsNext ? 'X' : 'O';\n\n    squares[move] = player;\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        coordinatesMove: Utils.calculatePosition(move),\n        player: player,\n        isHuman: currentIsHuman\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    }, () => {\n      if (currentIsHuman) {\n        this.passTurnToAI();\n      }\n    });\n  }\n\n  passTurnToAI() {\n    if (this.isNotAllowedMove()) {\n      return;\n    }\n\n    this.isPlayingAI = true;\n\n    setTimeout(() => {\n      const history = this.state.history.slice(0, this.state.history.length + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n  \n      const moveAI = AIPlayer.makeMove(squares);\n      this.registerMove(moveAI, false);\n      this.isPlayingAI = false;\n    }, 1000);\n\n  }\n\n  isNotAllowedMove() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = Utils.calculateWinner(current.squares);\n\n    if (winner) {\n      // Prevent Players move IF there is already a winner\n      return true;\n    }\n\n    if ((this.state.history.length - 1) !== this.state.stepNumber) {\n      // Prevent Players to make a new move if \n      // a the players are visualizing a previous\n      // move using the 'Moves' tool\n      return true;\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handlePickPlayer() {\n    if (this.state.stepNumber !== 0 || this.state.history.length > 1) {\n      // Do nothing if the game is already started\n      return;\n    }\n\n    this.setState({\n      xIsNext: !this.state.xIsNext\n    });\n\n    this.humanPlayer = !this.state.xIsNext ? 'X' : 'O';\n  }\n\n  handleSort() {\n    if (this.state.sortAscending) {\n      // ASC\n    }\n\n    if (!this.state.sortAscending) {\n      // DESC\n    }\n\n    this.setState({\n      sortAscending: !this.state.sortAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = Utils.calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const row = history[move].coordinatesMove[0];\n      const col = history[move].coordinatesMove[1];\n\n      const desc = move ?\n        history[move].player + ' in row ' + row + ' and col ' + col :\n        'Go to game start';\n        return (\n          <li className=\"game__move\" key={move} data-move-number={move}>\n            <button \n              onClick={() => this.jumpTo(move)}\n              className={this.state.stepNumber === move ? 'active' : ''}\n            >{desc}</button>\n          </li>\n        );\n    }).sort((moveA, moveB) => {\n      if (this.state.sortAscending) {\n        return moveA.key - moveB.key;\n      }\n\n      return moveB.key - moveA.key;\n    });\n\n    const isDraw = moves.length === 10 && !winner;\n\n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game__content\">\n            <div className=\"game__header\">\n              <div className=\"game__players\">\n                <button \n                  className={`game__player game__player--left ${this.state.xIsNext ? \"game__player--active\" : \"\"} ${winner || isDraw ? \"hidden\" : \"\"}`}\n                  onClick={() => this.handlePickPlayer()}\n                >X \n                  <span className={`game__player-label game__player-label--human ${this.humanPlayer === 'X' ? 'active' : ''}`}>\n                    You\n                  </span>\n                  <img className={`game__player-icon game__player-icon--human ${this.humanPlayer === 'X' ? 'active' : ''}`} src={HumanPlayerAvatar} alt=\"Human avatar\"/>\n                  <span className={`game__player-label game__player-label--bot ${this.humanPlayer !== 'X' ? 'active' : ''}`}>\n                    Bot\n                  </span>\n                  <img className={`game__player-icon game__player-icon--bot ${this.humanPlayer !== 'X' ? 'active' : ''}`} src={BotPlayerAvatar} alt=\"Bot avatar\"/>\n                </button>\n                <button \n                  className={`game__player game__player--right ${!this.state.xIsNext ? \" game__player--active\" : \"\"} ${winner || isDraw ? \"hidden\" : \"\"}`}\n                  onClick={() => this.handlePickPlayer()}\n                >O\n                  <span className={`game__player-label game__player-label--human ${this.humanPlayer === 'O' ? 'active' : ''}`}>\n                    You\n                  </span>\n                  <img className={`game__player-icon game__player-icon--human ${this.humanPlayer === 'O' ? 'active' : ''}`} src={HumanPlayerAvatar} alt=\"Human avatar\"/>\n                  <span className={`game__player-label game__player-label--bot ${this.humanPlayer !== 'O' ? 'active' : ''}`}>\n                    Bot\n                  </span>\n                  <img className={`game__player-icon game__player-icon--bot ${this.humanPlayer !== 'O' ? 'active' : ''}`} src={BotPlayerAvatar} alt=\"Bot avatar\"/>\n                </button>\n              </div>\n\n              <div \n                className={`game__message ${(isDraw ? 'is-draw' : '')} ${(winner ? 'is-winner' : '')}`}\n                onClick={() => this.handleResetGame()}\n              >\n                <h3 className=\"game__message-title\">\n                  {winner ? 'The WINNER is ' + winner.player + '!!! ' : 'DRAW'}\n                </h3> \n              </div>\n            </div>\n            <div className=\"game__board\">\n              <Board\n                winnerLine={winner?.line}\n                squares={current.squares}\n                onClick={(i) => this.handleClick(i)}\n              />\n            </div>\n            <div className=\"game__info\">\n              <div className=\"game__controls\">\n                <button \n                  className=\"game__controls-order\"\n                  onClick={() => this.handleSort()}\n                  disabled={moves.length < 2}\n                >\n                  Order by <span>{this.state.sortAscending ? '▲' : '▼'}</span>\n                </button>\n              </div>\n              <ol className=\"game__moves\">{moves}</ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","import ReactDOM from 'react-dom';\nimport Game from './components/Game/Game'\nimport './index.scss';\n\n//===============================\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}