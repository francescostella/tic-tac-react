{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Config.js","components/GameSettings/GameSettings.js","components/Utils.js","components/AIPlayer.js","assets/icons/icon-human.svg","assets/icons/icon-bot.svg","components/Game/Game.js","index.js"],"names":["Square","props","isWinnerSquare","winnerLine","includes","cellKey","classes","className","onClick","value","Board","i","this","squares","rows","columns","board","cellsCounter","row","j","push","renderSquare","createBoard","React","Component","Config","DELAY_AIPLAYER_MOVE","GAME_TYPE","HUMAN_VS_BOT","HUMAN_VS_HUMAN","BOT_LEVEL","EASY","INSANE","GameSettings","type","handleSetGameType","level","handleSetBotLevel","disabled","settings","gameType","setGameType","botLevel","setBotLevel","Utils","lines","index","length","a","b","c","player","line","every","item","items","Math","floor","random","currentHumanPlayerMark","AIPlayer","difficulty","markAIPlayer","levelSkills","easy","insane","currentAIPlayerMark","scores","move","bestScore","Infinity","score","minimax","isMaximizing","isWinner","calculateWinner","calculateDraw","max","min","possibleMoves","randomItemFromArray","bestMove","playDumb","Game","state","history","Array","fill","coordinatesMove","isHuman","stepNumber","xIsNext","sortAscending","showMoves","showGameSettings","baseState","Object","assign","getCurrentAIPlayerMark","isPlayingAI","setState","isNotAllowedMove","registerMove","currentIsHuman","slice","concat","calculatePosition","passTurnToAI","setTimeout","moveAI","makeMove","current","step","winner","moves","map","col","desc","data-move-number","jumpTo","sort","moveA","moveB","key","isDraw","handlePickPlayer","src","HumanPlayerAvatar","alt","BotPlayerAvatar","handleResetGame","bind","handleClick","toggleGameSettings","toggleMoveList","toggleSorting","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ad7a269.chunk.js","sourcesContent":["import './Square.styles.scss';\n\nconst Square = (props) => {\n  const isWinnerSquare = props.winnerLine && props.winnerLine.includes(props.cellKey) ? 'is-winner-square' : '';\n  const classes = `square ${isWinnerSquare}`;\n  return (\n    <button \n      className={classes} \n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;","import React from 'react';\nimport Square from '../Square/Square'; \nimport './Board.styles.scss'\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square \n        key={i}\n        cellKey={i}\n        value={this.props.squares[i]} \n        winnerLine={this.props.winnerLine}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  createBoard(rows, columns) {\n    const board = [];\n    let cellsCounter = 0;\n\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n\n      for (let j = 0; j < columns; j++) {\n        row.push(this.renderSquare(cellsCounter++));\n      }\n\n      board.push(<div className=\"board-row\" key={i}>{row}</div>)\n    }\n    \n    return board;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createBoard(3, 3)}\n      </div>\n    );\n  }\n}\n\nexport default Board;","class Config {\n  static DELAY_AIPLAYER_MOVE = 1000;\n  static GAME_TYPE = {\n    HUMAN_VS_BOT: 1,\n    HUMAN_VS_HUMAN: 2\n  };\n  \n  static BOT_LEVEL = {\n    EASY: 1,\n    INSANE: 2\n  };\n}\n\nexport default Config;","import React from 'react';\nimport './GameSettings.scss';\nimport Config from '../Config';\n\nclass GameSettings extends React.Component {\n  setGameType(type) {\n    if (!type) {\n      // Do nothing\n      return;\n    }\n\n    this.props.handleSetGameType(type);\n  }\n\n  setBotLevel(level) {\n    if (!level) {\n      // Do nothing\n      return;\n    }\n\n    this.props.handleSetBotLevel(level);\n  }\n\n  render() {\n    return (\n      <div className=\"game-settings\">\n        {/* <h3 className=\"game-settings__title\">Game Settings</h3> */}\n        <h4 className=\"game-settings__subtitle\">\n          Game type\n        </h4>\n        <ul className=\"game-settings__options\">\n          <li className=\"game-settings__option\">\n            <button\n              disabled={this.props.settings.gameType === Config.GAME_TYPE.HUMAN_VS_BOT}\n              onClick={() => this.setGameType(Config.GAME_TYPE.HUMAN_VS_BOT)}\n            >Human VS Bot</button>\n          </li>\n\n          <li className=\"game-settings__option\">\n            <button\n              disabled={this.props.settings.gameType === Config.GAME_TYPE.HUMAN_VS_HUMAN}\n              onClick={() => this.setGameType(Config.GAME_TYPE.HUMAN_VS_HUMAN)}\n            >Human VS Human</button>\n          </li>\n        </ul>\n        <h4 className=\"game-settings__subtitle\">\n          Bot level\n        </h4>\n        <ul className=\"game-settings__options\">\n          <li className=\"game-settings__option\">\n            <button \n              disabled={this.props.settings.botLevel === Config.BOT_LEVEL.EASY}\n              onClick={() => this.setBotLevel(Config.BOT_LEVEL.EASY)}\n            >Easy</button>\n          </li>\n\n          <li className=\"game-settings__option\">\n            <button\n              disabled={this.props.settings.botLevel === Config.BOT_LEVEL.INSANE}\n              onClick={() => this.setBotLevel(Config.BOT_LEVEL.INSANE)}\n            >Insane</button>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default GameSettings;","class Utils {\n  static calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n  \n    for (let index = 0; index < lines.length; index++) {\n      const [a, b, c] = lines[index];\n  \n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return {\n          player: squares[a],\n          line: [a, b, c]\n        };\n      }\n    }\n  \n    return null;\n  }\n  \n  static calculateDraw(squares) {\n    if (!squares) {\n      return false;\n    }\n  \n    return squares.every((item)=> item);\n  }\n  \n  static calculatePosition(index) {\n    switch (index) {\n      case 0:\n        return [1, 1];\n      case 1:\n        return [1, 2];\n      case 2:\n        return [1, 3];\n      case 3:\n        return [2, 1];\n      case 4:\n        return [2, 2];\n      case 5:\n        return [2, 3];\n      case 6:\n        return [3, 1];\n      case 7:\n        return [3, 2];\n      case 8:\n        return [3, 3];\n  \n      default:\n        return [1, 1];\n    }\n  }\n  \n  static randomItemFromArray(items) {\n    return items[Math.floor(Math.random() * items.length)];\n  }\n\n  static getCurrentAIPlayerMark(currentHumanPlayerMark) {\n    return currentHumanPlayerMark === 'X' ? 'O' : 'X';\n  }\n}\n\nexport default Utils;","import Utils from '../components/Utils';\n\nclass AIPlayer {\n  constructor(difficulty, markAIPlayer) {\n    let levelSkills = {\n      easy: 1,\n      insane: 2,\n    };\n\n    this.level = levelSkills[difficulty] ? levelSkills[difficulty] : 1;\n\n    this.currentAIPlayerMark = markAIPlayer;\n    this.currentHumanPlayerMark = markAIPlayer === 'X' ? 'O' : 'X';\n    this.scores = {\n      [this.currentAIPlayerMark]: 10,\n      [this.currentHumanPlayerMark]: -10,\n      draw: 0\n    };\n  }\n\n  getLevel() {\n    return this.level;\n  }\n\n  bestMove(board) {\n    let bestScore = -Infinity;\n    let move;\n\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === null) {\n        board[i] = this.currentAIPlayerMark;\n        let score = this.minimax(board, false);\n        board[i] = null;\n\n        if (score > bestScore) {\n          bestScore = score;\n          move = i;\n        }\n      }  \n    }\n\n    return move;\n  }\n\n  minimax(board, isMaximizing) {\n    const isWinner = Utils.calculateWinner(board);\n    const isDraw = Utils.calculateDraw(board);\n\n    if (isDraw && !isWinner) {\n      return this.scores['draw'];\n    }\n\n    if (isWinner) {\n      return this.scores[isWinner.player];\n    }\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n\n      for (let i = 0; i < board.length; i++) {\n        if (board[i] === null) {\n          board[i] = this.currentAIPlayerMark;\n          let score = this.minimax(board, false);\n          board[i] = null;\n          bestScore = Math.max(score, bestScore);\n        }\n      }\n\n      return bestScore;\n    }\n\n    if (!isMaximizing) {\n      let bestScore = Infinity;\n      \n      for (let i = 0; i < board.length; i++) {\n        if (board[i] === null) {\n          board[i] = this.currentHumanPlayerMark;\n          let score = this.minimax(board, true);\n          board[i] = null;\n          bestScore = Math.min(score, bestScore);\n        }\n      }\n      \n      return bestScore;\n    }\n\n  }\n\n  playDumb(board) {\n    let possibleMoves = [];\n\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === null) {\n        possibleMoves.push(i);\n      }  \n    }\n\n    return Utils.randomItemFromArray(possibleMoves);\n  }\n\n  makeMove(board, currentAIPlayerMark) {\n    if (this.level === 2) {\n      return this.bestMove(board, currentAIPlayerMark);\n    }\n\n    return this.playDumb(board);\n  }\n}\n\nexport default AIPlayer;","export default __webpack_public_path__ + \"static/media/icon-human.ebca92cc.svg\";","export default __webpack_public_path__ + \"static/media/icon-bot.a80b2169.svg\";","import React from 'react';\n\n// Components\nimport Board from '../Board/Board';\nimport GameSettings from '../GameSettings/GameSettings';\n\n// Classes\nimport AIPlayer from '../AIPlayer';\nimport Utils from '../Utils';\nimport Config from '../Config';\n\n\n// Assets\nimport './Game.style.scss'\nimport HumanPlayerAvatar from '../../assets/icons/icon-human.svg';\nimport BotPlayerAvatar from '../../assets/icons/icon-bot.svg'\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          coordinatesMove: [0, 0],\n          isHuman: true,\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      sortAscending: true,\n      showMoves: false,\n      showGameSettings: false,\n      settings: {\n        gameType: Config.GAME_TYPE.HUMAN_VS_BOT,\n        botLevel: Config.BOT_LEVEL.EASY\n      },\n    }\n    \n    // Clone initial state, so it can be used on reset game\n    this.baseState = Object.assign({}, this.state);\n\n    this.currentHumanPlayerMark = this.state.xIsNext ? 'X' : 'O';\n    this.AIPlayer = new AIPlayer('insane', Utils.getCurrentAIPlayerMark(this.currentHumanPlayerMark));\n    \n    // Flag used to keep track of when the AI is playing\n    // in order to prevent any UI interaction causing overlapses\n    this.isPlayingAI = false;\n  }\n\n  handleResetGame() {\n    this.setState(this.baseState)\n    this.currentHumanPlayerMark = this.baseState.xIsNext ? 'X' : 'O';\n  }\n\n  handleClick(i) {\n    if (this.isNotAllowedMove() || this.isPlayingAI) {\n      return;\n    }\n\n    this.registerMove(i, true);\n  }\n\n  registerMove(move, currentIsHuman) {\n    const history = this.state.history.slice(0, this.state.history.length + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (squares[move]) {\n      return;\n    }\n\n    const player = this.state.xIsNext ? 'X' : 'O';\n\n    squares[move] = player;\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        coordinatesMove: Utils.calculatePosition(move),\n        player: player,\n        isHuman: currentIsHuman\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    }, () => {\n      if (currentIsHuman) {\n        this.passTurnToAI();\n      }\n    });\n  }\n\n  passTurnToAI() {\n    if (this.isNotAllowedMove()) {\n      return;\n    }\n\n    this.isPlayingAI = true;\n\n    setTimeout(() => {\n      const history = this.state.history.slice(0, this.state.history.length + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n  \n      const moveAI = this.AIPlayer.makeMove(squares, Utils.getCurrentAIPlayerMark(this.currentHumanPlayerMark));\n      this.registerMove(moveAI, false);\n      this.isPlayingAI = false;\n    }, Config.DELAY_AIPLAYER_MOVE);\n  }\n\n  isNotAllowedMove() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n\n    if (Utils.calculateWinner(current.squares)) {\n      // Prevent Players move IF there is already a winner\n      return true;\n    }\n\n    if (Utils.calculateDraw(current.squares)) {\n      // Prevent Players move IF it's a draw\n      return true;\n    }\n\n    if ((this.state.history.length - 1) !== this.state.stepNumber) {\n      // Prevent Players to make a new move if \n      // a the players are visualizing a previous\n      // move using the 'Moves' tool\n      return true;\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleSetGameType(type) {\n    if (!type) {\n      // Do nothing\n      return;\n    }\n\n    this.setState({\n      settings: {\n        ...this.state.settings,\n        gameType: type\n      }\n    });\n  }\n\n  handleSetBotLevel(level) {\n    if (!level) {\n      // Do nothing\n      return;\n    }\n\n    this.setState({\n      settings: {\n        ...this.state.settings,\n        botLevel: level\n      }\n    });\n  }\n\n\n  handlePickPlayer() {\n    if (this.state.stepNumber !== 0 || this.state.history.length > 1) {\n      // Do nothing if the game is already started\n      return;\n    }\n\n    this.setState({\n      xIsNext: !this.state.xIsNext\n    });\n\n    this.currentHumanPlayerMark = !this.state.xIsNext ? 'X' : 'O';\n    this.AIPlayer = new AIPlayer('insane', Utils.getCurrentAIPlayerMark(this.currentHumanPlayerMark));\n  }\n\n  toggleSorting() {\n    this.setState({\n      sortAscending: !this.state.sortAscending\n    });\n  }\n\n  toggleMoveList() {\n    this.setState({\n      showMoves: !this.state.showMoves\n    });\n  }\n\n  toggleGameSettings() {\n    this.setState({\n      showGameSettings: !this.state.showGameSettings\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = Utils.calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const row = history[move].coordinatesMove[0];\n      const col = history[move].coordinatesMove[1];\n\n      const desc = move ?\n        history[move].player + ' in row ' + row + ' and col ' + col :\n        'Go to game start';\n        return (\n          <li className=\"game__move\" key={move} data-move-number={move}>\n            <button \n              onClick={() => this.jumpTo(move)}\n              className={this.state.stepNumber === move ? 'active' : ''}\n            >{desc}</button>\n          </li>\n        );\n    }).sort((moveA, moveB) => {\n      if (this.state.sortAscending) {\n        return moveA.key - moveB.key;\n      }\n\n      return moveB.key - moveA.key;\n    });\n\n    const isDraw = moves.length === 10 && !winner;\n\n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game__content\">\n            <div className=\"game__header\">\n              <div className=\"game__players\">\n                <button \n                  className={`game__player game__player--left ${this.state.xIsNext ? \"game__player--active\" : \"\"} ${winner || isDraw ? \"hidden\" : \"\"}`}\n                  onClick={() => this.handlePickPlayer()}\n                >X \n                  <span className={`game__player-label game__player-label--human ${this.currentHumanPlayerMark === 'X' ? 'active' : ''}`}>\n                    You\n                  </span>\n                  <img className={`game__player-icon game__player-icon--human ${this.currentHumanPlayerMark === 'X' ? 'active' : ''}`} src={HumanPlayerAvatar} alt=\"Human avatar\"/>\n                  <span className={`game__player-label game__player-label--bot ${this.currentHumanPlayerMark !== 'X' ? 'active' : ''}`}>\n                    Bot\n                  </span>\n                  <img className={`game__player-icon game__player-icon--bot ${this.currentHumanPlayerMark !== 'X' ? 'active' : ''}`} src={BotPlayerAvatar} alt=\"Bot avatar\"/>\n                </button>\n                <button \n                  className={`game__player game__player--right ${!this.state.xIsNext ? \" game__player--active\" : \"\"} ${winner || isDraw ? \"hidden\" : \"\"}`}\n                  onClick={() => this.handlePickPlayer()}\n                >O\n                  <span className={`game__player-label game__player-label--human ${this.currentHumanPlayerMark === 'O' ? 'active' : ''}`}>\n                    You\n                  </span>\n                  <img className={`game__player-icon game__player-icon--human ${this.currentHumanPlayerMark === 'O' ? 'active' : ''}`} src={HumanPlayerAvatar} alt=\"Human avatar\"/>\n                  <span className={`game__player-label game__player-label--bot ${this.currentHumanPlayerMark !== 'O' ? 'active' : ''}`}>\n                    Bot\n                  </span>\n                  <img className={`game__player-icon game__player-icon--bot ${this.currentHumanPlayerMark !== 'O' ? 'active' : ''}`} src={BotPlayerAvatar} alt=\"Bot avatar\"/>\n                </button>\n              </div>\n\n              <div \n                className={`game__message ${(isDraw ? 'is-draw' : '')} ${(winner ? 'is-winner' : '')}`}\n                onClick={() => this.handleResetGame()}\n              >\n                <h3 className=\"game__message-title\">\n                  {winner ? 'The WINNER is ' + winner.player + '!!! ' : 'DRAW'}\n                </h3> \n              </div>\n            </div>\n            <div className=\"game__board\">\n              <div className={`game__settings ${this.state.showGameSettings ? 'game__settings--show' : 'game__settings--hide'}`}>\n                <GameSettings\n                  settings={this.state.settings}\n                  handleSetGameType={this.handleSetGameType.bind(this)} \n                  handleSetBotLevel={this.handleSetBotLevel.bind(this)} \n                />\n              </div>\n              \n              <Board\n                winnerLine={winner?.line}\n                squares={current.squares}\n                onClick={(i) => this.handleClick(i)}\n              />\n            </div>\n            <div className=\"game__info\">\n              <div className=\"game__controls\">\n                <button \n                  className=\"game__button game__button--game-settings\"\n                  onClick={() => this.toggleGameSettings()}\n                  disabled={moves.length > 1}\n                >\n                  Game Settings\n                </button>\n                <button \n                  className=\"game__button game__button--show-moves\"\n                  onClick={() => this.toggleMoveList()}\n                >\n                  <span>{`${(this.state.showMoves ? \"Hide\" : \"Show\")}`}</span>\n                  {' '}Moves\n                </button>\n              </div>\n              <div className={`game__moves-box ${this.state.showMoves ? \"game__moves-box--opened\" : \"game__moves-box--closed\"}`}>\n                <button \n                  className=\"game__button game__button--sorting\"\n                  onClick={() => this.toggleSorting()}\n                  disabled={moves.length < 2}\n                >\n                  Order by <span className=\"game__button-icon\">{this.state.sortAscending ? '▲' : '▼'}</span>\n                </button>\n                <ol className=\"game__moves\">{moves}</ol>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","import ReactDOM from 'react-dom';\nimport Game from './components/Game/Game'\nimport './index.scss';\n\n//===============================\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}