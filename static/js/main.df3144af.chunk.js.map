{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Utils.js","components/Game/Game.js","index.js"],"names":["Square","props","isWinnerSquare","winnerLine","includes","cellKey","classes","className","onClick","value","Board","i","this","squares","rows","columns","board","cellsCounter","row","j","push","renderSquare","createBoard","React","Component","Utils","lines","index","length","a","b","c","player","line","Game","state","history","Array","fill","coordinatesMove","stepNumber","xIsNext","sortAscending","slice","calculateWinner","setState","concat","calculatePosition","step","current","winner","moves","map","move","col","desc","data-move-number","jumpTo","sort","moveA","moveB","key","classNamesMessage","handleClick","handleSort","window","location","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df3144af.chunk.js","sourcesContent":["import './Square.styles.scss';\n\nconst Square = (props) => {\n  const isWinnerSquare = props.winnerLine && props.winnerLine.includes(props.cellKey) ? 'is-winner-square' : '';\n  const classes = `square ${isWinnerSquare}`;\n  return (\n    <button \n      className={classes} \n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;","import React from 'react';\nimport Square from '../Square/Square'; \nimport './Board.styles.scss'\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square \n        key={i}\n        cellKey={i}\n        value={this.props.squares[i]} \n        winnerLine={this.props.winnerLine}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  createBoard(rows, columns) {\n    const board = [];\n    let cellsCounter = 0;\n\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n\n      for (let j = 0; j < columns; j++) {\n        row.push(this.renderSquare(cellsCounter++));\n      }\n\n      board.push(<div className=\"board-row\" key={i}>{row}</div>)\n    }\n    \n    return board;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createBoard(3, 3)}\n      </div>\n    );\n  }\n}\n\nexport default Board;","const Utils = {};\n\nUtils.calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let index = 0; index < lines.length; index++) {\n    const [a, b, c] = lines[index];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        player: squares[a],\n        line: [a, b, c]\n      };\n    }\n  }\n\n  return null;\n}\n\nUtils.calculatePosition = (index) => {\n  switch (index) {\n    case 0:\n      return [1, 1];\n    case 1:\n      return [1, 2];\n    case 2:\n      return [1, 3];\n    case 3:\n      return [2, 1];\n    case 4:\n      return [2, 2];\n    case 5:\n      return [2, 3];\n    case 6:\n      return [3, 1];\n    case 7:\n      return [3, 2];\n    case 8:\n      return [3, 3];\n\n    default:\n      return [1, 1];\n  }\n}\n\nexport default Utils;","import React from 'react';\nimport Board from '../Board/Board';\nimport Utils from '../Utils';\nimport './Game.style.scss'\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          coordinatesMove: [0, 0],\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      sortAscending: true,\n    }\n\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.history.length + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (Utils.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    const player = this.state.xIsNext ? 'X' : 'O';\n\n    squares[i] = player;\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        coordinatesMove: Utils.calculatePosition(i),\n        player: player,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleSort() {\n    if (this.state.sortAscending) {\n      // ASC\n    }\n\n    if (!this.state.sortAscending) {\n      // DESC\n    }\n\n    this.setState({\n      sortAscending: !this.state.sortAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = Utils.calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const row = history[move].coordinatesMove[0];\n      const col = history[move].coordinatesMove[1];\n\n      const desc = move ?\n        history[move].player + ' in row ' + row + ' and col ' + col :\n        'Go to game start';\n        return (\n          <li className=\"game__move\" key={move} data-move-number={move}>\n            <button \n              onClick={() => this.jumpTo(move)}\n              className={this.state.stepNumber === move ? 'active' : ''}\n            >{desc}</button>\n          </li>\n        );\n    }).sort((moveA, moveB) => {\n      if (this.state.sortAscending) {\n        return moveA.key - moveB.key;\n      }\n\n      if (!this.state.sortAscending) {\n        return moveB.key - moveA.key;\n      }\n    });\n\n    const isDraw = moves.length === 10 && !winner;\n    const classNamesMessage = 'game__message ' + (isDraw ? 'is-draw' : '') + (winner ? 'is-winner' : '');\n\n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game__content\">\n            <div className=\"game__players\">\n              <button \n                className={`game__player ${this.state.xIsNext ? \"game__player--active\" : \"\"} ${winner ? \"hidden\" : \"\"}`}\n              >X</button>\n              <button \n                className={`game__player ${!this.state.xIsNext ? \"game__player--active\" : \"\"} ${winner ? \"hidden\" : \"\"}`}\n              >O</button>\n            </div>\n            <div className=\"game__board\">\n              <Board\n                winnerLine={winner?.line}\n                squares={current.squares}\n                onClick={(i) => this.handleClick(i)}\n              />\n            </div>\n            <div className=\"game__info\">\n              <div>\n                <button \n                  onClick={() => this.handleSort()}\n                >\n                  Sort {this.state.sortAscending ? 'ASC' : 'DESC'}\n                </button>\n              </div>\n              <ol className=\"game__moves\">{moves}</ol>\n            </div>\n          </div>\n        </div>\n        \n        <div className={classNamesMessage}>\n          <h3>{winner ? 'The WINNER is ' + winner.player + '! ' : 'DRAW'}</h3> \n          <div>\n            <button onClick={() => window.location.reload()}>\n            {winner ? 'New Game' : 'Restart'}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","import ReactDOM from 'react-dom';\nimport Game from './components/Game/Game'\nimport './index.scss';\n\n//===============================\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}